name: Check CAPEv2 Detection

on:
  workflow_run:
    workflows:
      - Test Build
    types:
      - completed

jobs:
  on-success:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update apt and install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 python3-yaml
        cp .conf.template .conf

    - name: Set up Tailscale
      uses: tailscale/github-action@v3
      with:
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        tags: tag:ci

    - name: wait for Tailscale host
      run: |
        echo "[*] Waiting for Tailscale to be ready..."
        sleep 10
        for i in {1..20}; do
          echo "⏳ Pinging ${{ secrets.CAPE_HOST }} (attempt $i)..."
          ping -c 3 ${{ secrets.CAPE_HOST }} >/dev/null 2>&1 && break || {
            echo "❌ Tailscale not ready yet, retrying in 5 seconds..."
            sleep 5
          }
        done
        echo "✅ Host is reachable"
        # Need to implement timeout exit
      
    - name: Check for CAPE Sandbox status
      env:
        CAPE_HOST: ${{ secrets.CAPE_HOST }}
      run: |
        echo "[*] Checking Sandbox status..."

        response=$(curl -s "http://${CAPE_HOST}:8000/apiv2/cuckoo/status/")
        echo $response

        if [[ -z "$response" ]]; then
            echo "❌ No response received from CAPE"
            exit 1
        fi

        error=$(echo "$response" | jq -r '.error')
        available=$(echo "$response" | jq -r '.data.machines.total')

        if [[ "$error" != "false" ]]; then
            echo "❌ CAPE reported error=true"
            exit 1
        fi

        if [[ "$available" -lt 1 ]]; then
            echo "❌ No machines available in CAPE"
            exit 1
        fi

    - name: Get commit message
      id: get_commit_msg
      run: |
        commit_url="${{ github.event.workflow_run.head_repository.url }}/commits/${{ github.event.workflow_run.head_sha }}"
        echo "Fetching commit from: $commit_url"
        
        message=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/${{ github.repository }}/commits/${{ github.event.workflow_run.head_sha }} \
          | jq -r '.commit.message')

        # Sanitize the message for filenames
        safe_message=$(echo "$message" | tr -cd '[:alnum:]_-' | cut -c1-50)
        echo "commit_message=$safe_message" >> "$GITHUB_OUTPUT"

    - name: Compile samples
      run: |
        echo "[*] Compiling samples..."
        chmod +x build.sh

        safe_name="${{ steps.get_commit_msg.outputs.commit_message }}"
        ./build.sh -o "sample_${safe_name}.exe"
        ./build.sh --small -o "sample_${safe_name}_small.exe"

    - name: Submit sample to CAPE
      env:
        CAPE_HOST: ${{ secrets.CAPE_HOST }}
        CAPE_API_TOKEN: ${{ secrets.CAPE_API_TOKEN }}
      run: |
        name="${{ steps.get_commit_msg.outputs.commit_message }}"

        echo "[*] Submitting $name binaries to CAPE..."

        response=$(curl -sSL -X POST \
          -F file=@bin/sample_${name}.exe \
          -F package="exe" \
          -H "Authorization: Token $CAPE_API_TOKEN" \
          http://${CAPE_HOST}:8000/apiv2/tasks/create/file/)

        task_id=$(echo "$response" | jq -r '.data.task_ids[0]')

        response_small=$(curl -sSL -X POST \
          -F file=@bin/sample_${name}_small.exe \
          -F package="exe" \
          -H "Authorization: Token $CAPE_API_TOKEN" \
          http://${CAPE_HOST}:8000/apiv2/tasks/create/file/)

        task_id_small=$(echo "$response_small" | jq -r '.data.task_ids[0]')

        echo "Submitted tasks: $task_id, $task_id_small"
          
